<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tally.dao.tallyworkorder.TallyWorkOrderMapper">

  <resultMap id="BaseResultMap" type="com.tally.dao.tallyworkorder.model.TallyWorkOrder">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="order_id" jdbcType="INTEGER" property="orderId"/>
    <result column="order_no" jdbcType="LONGVARCHAR" property="orderNo"/>
    <result column="remark" jdbcType="LONGVARCHAR" property="remark"/>
    <result column="name" jdbcType="LONGVARCHAR" property="name"/>
    <result column="principal" jdbcType="LONGVARCHAR" property="principal"/>
    <result column="initiator" jdbcType="LONGVARCHAR" property="initiator"/>
    <result column="work_day" jdbcType="INTEGER" property="workDay"/>
    <result column="begin_time" jdbcType="TIMESTAMP" property="beginTime"/>
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime"/>
    <result column="status" jdbcType="INTEGER" property="status"/>
    <result column="auit_status" jdbcType="INTEGER" property="auitStatus"/>
    <result column="current_auit_id" jdbcType="INTEGER" property="currentAuitId"/>
    <result column="create_time" jdbcType="VARCHAR" property="createTime"/>
    <result column="update_time" jdbcType="VARCHAR" property="updateTime"/>
    <result column="version" jdbcType="INTEGER" property="version"/>
  </resultMap>

  <resultMap id="OutDtoResultMap" extends="BaseResultMap" type="com.tally.api.outputDto.TallyWorkOrderOutputDto">
    <collection property="list"  column="id" ofType="com.tally.api.outputDto.TallyWorkOrderProductOutDto"
                select="com.tally.dao.tallyworkorderproduct.TallyWorkOrderProductMapper.selectByWorkOrderId">
          <id column="id" jdbcType="INTEGER" property="id"/>
          <result column="work_order_id" jdbcType="INTEGER" property="workOrderId"/>
          <result column="product_id" jdbcType="INTEGER" property="productId"/>
          <result column="product_name" jdbcType="VARCHAR" property="productName"/>
          <result column="product_spec_id" jdbcType="INTEGER" property="productSpecId"/>
          <result column="product_spec_name" jdbcType="VARCHAR" property="productSpecName"/>
          <result column="product_spec_num" jdbcType="INTEGER" property="productSpecNum"/>
    </collection>
  </resultMap>



  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `order_id`, `order_no`, `remark`, `name`, `principal`, `initiator`, `work_day`, `begin_time`, `end_time`, `status`, `auit_status`, `current_auit_id`, `create_time`, `update_time`, `version`
  </sql>
  <select id="selectByExample" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrderExample" resultMap="OutDtoResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from `tally_work_order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `tally_work_order`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `tally_work_order`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrderExample">
    delete from `tally_work_order`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrder">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_work_order` (
      `order_id`, 
      `order_no`,
      `remark`,
      `name`,
      `principal`, 
      `initiator`, 
      `work_day`, 
      `begin_time`, 
      `end_time`, 
      `status`, 
      `auit_status`, 
      `current_auit_id`, 
      `create_time`, 
      `update_time`, 
      `version`
    )
    values (
      #{orderId,jdbcType=INTEGER}, 
      #{orderNo,jdbcType=LONGVARCHAR}, 
      #{remark,jdbcType=LONGVARCHAR},
      #{name,jdbcType=LONGVARCHAR},
      #{principal,jdbcType=LONGVARCHAR}, 
      #{initiator,jdbcType=LONGVARCHAR}, 
      #{workDay,jdbcType=INTEGER}, 
      #{beginTime,jdbcType=TIMESTAMP}, 
      #{endTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, 
      #{auitStatus,jdbcType=INTEGER}, 
      #{currentAuitId,jdbcType=INTEGER}, 
      #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, 
      #{version,jdbcType=INTEGER}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrder" useGeneratedKeys="true" keyProperty="id" keyColumn="id">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_work_order`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
      `order_id`,
      </if>
      <if test="orderNo != null">
      `order_no`,
      </if>
      <if test="remark != null">
      `remark`,
      </if>
      <if test="name != null">
      `name`,
      </if>
      <if test="principal != null">
      `principal`,
      </if>
      <if test="initiator != null">
      `initiator`,
      </if>
      <if test="workDay != null">
      `work_day`,
      </if>
      <if test="beginTime != null">
      `begin_time`,
      </if>
      <if test="endTime != null">
      `end_time`,
      </if>
      <if test="status != null">
      `status`,
      </if>
      <if test="auitStatus != null">
      `auit_status`,
      </if>
      <if test="currentAuitId != null">
      `current_auit_id`,
      </if>
      <if test="createTime != null">
      `create_time`,
      </if>
      <if test="updateTime != null">
      `update_time`,
      </if>
      <if test="version != null">
      `version`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="orderId != null">
        #{orderId,jdbcType=INTEGER},
      </if>
      <if test="orderNo != null">
        #{orderNo,jdbcType=LONGVARCHAR},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="name != null">
        #{name,jdbcType=LONGVARCHAR},
      </if>
      <if test="principal != null">
        #{principal,jdbcType=LONGVARCHAR},
      </if>
      <if test="initiator != null">
        #{initiator,jdbcType=LONGVARCHAR},
      </if>
      <if test="workDay != null">
        #{workDay,jdbcType=INTEGER},
      </if>
      <if test="beginTime != null">
        #{beginTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="auitStatus != null">
        #{auitStatus,jdbcType=INTEGER},
      </if>
      <if test="currentAuitId != null">
        #{currentAuitId,jdbcType=INTEGER},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="version != null">
        #{version,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrderExample" resultType="java.lang.Integer">
    select count(*) from `tally_work_order`
    <if test="_parameter != null">
    <include refid="Example_Where_Clause"/>
    </if>
  </select>
    <update id="updateByExampleSelective" parameterType="map">
    update `tally_work_order`
    <set>
      <if test="record.orderId != null">
      `order_id` = #{record.orderId,jdbcType=INTEGER}, 
      </if>
      <if test="record.orderNo != null">
      `order_no` = #{record.orderNo,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.remark != null">
      `remark` = #{record.remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="record.name != null">
      `name` = #{record.name,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.principal != null">
      `principal` = #{record.principal,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.initiator != null">
      `initiator` = #{record.initiator,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.workDay != null">
      `work_day` = #{record.workDay,jdbcType=INTEGER}, 
      </if>
      <if test="record.beginTime != null">
      `begin_time` = #{record.beginTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="record.endTime != null">
      `end_time` = #{record.endTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="record.status != null">
      `status` = #{record.status,jdbcType=INTEGER}, 
      </if>
      <if test="record.auitStatus != null">
      `auit_status` = #{record.auitStatus,jdbcType=INTEGER}, 
      </if>
      <if test="record.currentAuitId != null">
      `current_auit_id` = #{record.currentAuitId,jdbcType=INTEGER}, 
      </if>
      <if test="record.createTime != null">
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="record.updateTime != null">
      `update_time` = #{record.updateTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="record.version != null">
      `version` = #{record.version,jdbcType=INTEGER}
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `tally_work_order`
    <set>
      `order_id` = #{record.orderId,jdbcType=INTEGER}, 
      `order_no` = #{record.orderNo,jdbcType=LONGVARCHAR}, 
      `remark` = #{record.remark,jdbcType=LONGVARCHAR},
      `name` = #{record.name,jdbcType=LONGVARCHAR},
      `principal` = #{record.principal,jdbcType=LONGVARCHAR}, 
      `initiator` = #{record.initiator,jdbcType=LONGVARCHAR}, 
      `work_day` = #{record.workDay,jdbcType=INTEGER}, 
      `begin_time` = #{record.beginTime,jdbcType=TIMESTAMP}, 
      `end_time` = #{record.endTime,jdbcType=TIMESTAMP}, 
      `status` = #{record.status,jdbcType=INTEGER}, 
      `auit_status` = #{record.auitStatus,jdbcType=INTEGER}, 
      `current_auit_id` = #{record.currentAuitId,jdbcType=INTEGER}, 
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}, 
      `update_time` = #{record.updateTime,jdbcType=TIMESTAMP}, 
      `version` = #{record.version,jdbcType=INTEGER}
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrder">
    update `tally_work_order`
    <set>
      <if test="orderId != null">
      `order_id` = #{orderId,jdbcType=INTEGER}, 
      </if>
      <if test="orderNo != null">
      `order_no` = #{orderNo,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="remark != null">
      `remark` = #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="name != null">
      `name` = #{name,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="principal != null">
      `principal` = #{principal,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="initiator != null">
      `initiator` = #{initiator,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="workDay != null">
      `work_day` = #{workDay,jdbcType=INTEGER}, 
      </if>
      <if test="beginTime != null">
      `begin_time` = #{beginTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="endTime != null">
      `end_time` = #{endTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="status != null">
      `status` = #{status,jdbcType=INTEGER}, 
      </if>
      <if test="auitStatus != null">
      `auit_status` = #{auitStatus,jdbcType=INTEGER}, 
      </if>
      <if test="currentAuitId != null">
      `current_auit_id` = #{currentAuitId,jdbcType=INTEGER}, 
      </if>
      <if test="createTime != null">
      `create_time` = #{createTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="updateTime != null">
      `update_time` = #{updateTime,jdbcType=TIMESTAMP}, 
      </if>
      <if test="version != null">
      `version` = #{version,jdbcType=INTEGER}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tally.dao.tallyworkorder.model.TallyWorkOrder">
    update `tally_work_order`
    <set>
      `order_id` = #{orderId,jdbcType=INTEGER}, 
      `order_no` = #{orderNo,jdbcType=LONGVARCHAR}, 
      `remark` = #{remark,jdbcType=LONGVARCHAR},
      `name` = #{name,jdbcType=LONGVARCHAR},
      `principal` = #{principal,jdbcType=LONGVARCHAR}, 
      `initiator` = #{initiator,jdbcType=LONGVARCHAR}, 
      `work_day` = #{workDay,jdbcType=INTEGER}, 
      `begin_time` = #{beginTime,jdbcType=TIMESTAMP}, 
      `end_time` = #{endTime,jdbcType=TIMESTAMP}, 
      `status` = #{status,jdbcType=INTEGER}, 
      `auit_status` = #{auitStatus,jdbcType=INTEGER}, 
      `current_auit_id` = #{currentAuitId,jdbcType=INTEGER}, 
      `create_time` = #{createTime,jdbcType=TIMESTAMP}, 
      `update_time` = #{updateTime,jdbcType=TIMESTAMP}, 
      `version` = #{version,jdbcType=INTEGER}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>