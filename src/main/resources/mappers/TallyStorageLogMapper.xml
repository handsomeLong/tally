<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tally.dao.tallystoragelog.TallyStorageLogMapper">

  <resultMap id="BaseResultMap" type="com.tally.dao.tallystoragelog.model.TallyStorageLog">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="user_id" jdbcType="INTEGER" property="userId"/>
    <result column="relate_id" jdbcType="INTEGER" property="relateId"/>
    <result column="operate_type" jdbcType="INTEGER" property="operateType"/>
    <result column="operate_type_name" jdbcType="LONGVARCHAR" property="operateTypeName"/>
    <result column="product_name" jdbcType="LONGVARCHAR" property="productName"/>
    <result column="product_no" jdbcType="LONGVARCHAR" property="productNo"/>
    <result column="product_id" jdbcType="INTEGER" property="productId"/>
    <result column="spec_id" jdbcType="INTEGER" property="specId"/>
    <result column="storage" jdbcType="INTEGER" property="storage"/>
    <result column="before_storage" jdbcType="INTEGER" property="beforeStorage"/>
    <result column="after_storage" jdbcType="INTEGER" property="afterStorage"/>
    <result column="operate_user_id" jdbcType="INTEGER" property="operateUserId"/>
    <result column="remark" jdbcType="LONGVARCHAR" property="remark"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>
  <resultMap extends="BaseResultMap" id="BaseResultMapWithSpec" type="com.tally.api.outputDto.TallyStorageLogOutDto">
    <result column="spec_name" jdbcType="LONGVARCHAR" property="specName"/>
    <result column="spec_images" jdbcType="LONGVARCHAR" property="specImages"/>
    <result column="spec_serial" jdbcType="LONGVARCHAR" property="specSerial"/>
    <result column="spec_unit" jdbcType="VARCHAR" property="specUnit"/>
    <result column="spec_storage" jdbcType="INTEGER" property="specStorage"/>
    <result column="spec_storage_freeze" jdbcType="INTEGER" property="specStorageFreeze"/>
    <result column="spec_price" jdbcType="DECIMAL" property="specPrice"/>
    <result column="spec_stock_price" jdbcType="DECIMAL" property="specStockPrice"/>
    <result column="spec_cost_price" jdbcType="DECIMAL" property="specCostPrice"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `user_id`, `relate_id`, `operate_type`, `operate_type_name`, `product_name`, `product_no`, `product_id`, `spec_id`, `storage`, `before_storage`, `after_storage`, `operate_user_id`, `remark`, `create_time`
  </sql>
  <select id="selectByExample" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLogExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from `tally_storage_log`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `tally_storage_log`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `tally_storage_log`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLogExample">
    delete from `tally_storage_log`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_storage_log` (
      `user_id`, 
      `relate_id`, 
      `operate_type`, 
      `operate_type_name`, 
      `product_name`, 
      `product_no`, 
      `product_id`, 
      `spec_id`, 
      `storage`, 
      `before_storage`, 
      `after_storage`, 
      `operate_user_id`, 
      `remark`, 
      `create_time`
    )
    values (
      #{userId,jdbcType=INTEGER}, 
      #{relateId,jdbcType=INTEGER}, 
      #{operateType,jdbcType=INTEGER}, 
      #{operateTypeName,jdbcType=LONGVARCHAR}, 
      #{productName,jdbcType=LONGVARCHAR}, 
      #{productNo,jdbcType=LONGVARCHAR}, 
      #{productId,jdbcType=INTEGER}, 
      #{specId,jdbcType=INTEGER}, 
      #{storage,jdbcType=INTEGER}, 
      #{beforeStorage,jdbcType=INTEGER}, 
      #{afterStorage,jdbcType=INTEGER}, 
      #{operateUserId,jdbcType=INTEGER}, 
      #{remark,jdbcType=LONGVARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLog">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_storage_log`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userId != null">
      `user_id`,
      </if>
      <if test="relateId != null">
      `relate_id`,
      </if>
      <if test="operateType != null">
      `operate_type`,
      </if>
      <if test="operateTypeName != null">
      `operate_type_name`,
      </if>
      <if test="productName != null">
      `product_name`,
      </if>
      <if test="productNo != null">
      `product_no`,
      </if>
      <if test="productId != null">
      `product_id`,
      </if>
      <if test="specId != null">
      `spec_id`,
      </if>
      <if test="storage != null">
      `storage`,
      </if>
      <if test="beforeStorage != null">
      `before_storage`,
      </if>
      <if test="afterStorage != null">
      `after_storage`,
      </if>
      <if test="operateUserId != null">
      `operate_user_id`,
      </if>
      <if test="remark != null">
      `remark`,
      </if>
      <if test="createTime != null">
      `create_time`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userId != null">
        #{userId,jdbcType=INTEGER},
      </if>
      <if test="relateId != null">
        #{relateId,jdbcType=INTEGER},
      </if>
      <if test="operateType != null">
        #{operateType,jdbcType=INTEGER},
      </if>
      <if test="operateTypeName != null">
        #{operateTypeName,jdbcType=LONGVARCHAR},
      </if>
      <if test="productName != null">
        #{productName,jdbcType=LONGVARCHAR},
      </if>
      <if test="productNo != null">
        #{productNo,jdbcType=LONGVARCHAR},
      </if>
      <if test="productId != null">
        #{productId,jdbcType=INTEGER},
      </if>
      <if test="specId != null">
        #{specId,jdbcType=INTEGER},
      </if>
      <if test="storage != null">
        #{storage,jdbcType=INTEGER},
      </if>
      <if test="beforeStorage != null">
        #{beforeStorage,jdbcType=INTEGER},
      </if>
      <if test="afterStorage != null">
        #{afterStorage,jdbcType=INTEGER},
      </if>
      <if test="operateUserId != null">
        #{operateUserId,jdbcType=INTEGER},
      </if>
      <if test="remark != null">
        #{remark,jdbcType=LONGVARCHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLogExample" resultType="java.lang.Integer">
    select count(*) from `tally_storage_log`
    <if test="_parameter != null">
    <include refid="Example_Where_Clause"/>
    </if>
  </select>
    <select id="findPageWithSpec" resultMap="BaseResultMapWithSpec">
      select l.*,spec.* from tally_storage_log l
      LEFT JOIN tally_product_spec spec on spec.id=l.spec_id
      where l.user_id = #{userId}
      <if test="specId != null">
        and  l.spec_id = #{specId}
      </if>
      order by l.id desc
    </select>
    <update id="updateByExampleSelective" parameterType="map">
    update `tally_storage_log`
    <set>
      <if test="record.userId != null">
      `user_id` = #{record.userId,jdbcType=INTEGER}, 
      </if>
      <if test="record.relateId != null">
      `relate_id` = #{record.relateId,jdbcType=INTEGER}, 
      </if>
      <if test="record.operateType != null">
      `operate_type` = #{record.operateType,jdbcType=INTEGER}, 
      </if>
      <if test="record.operateTypeName != null">
      `operate_type_name` = #{record.operateTypeName,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.productName != null">
      `product_name` = #{record.productName,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.productNo != null">
      `product_no` = #{record.productNo,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.productId != null">
      `product_id` = #{record.productId,jdbcType=INTEGER}, 
      </if>
      <if test="record.specId != null">
      `spec_id` = #{record.specId,jdbcType=INTEGER}, 
      </if>
      <if test="record.storage != null">
      `storage` = #{record.storage,jdbcType=INTEGER}, 
      </if>
      <if test="record.beforeStorage != null">
      `before_storage` = #{record.beforeStorage,jdbcType=INTEGER}, 
      </if>
      <if test="record.afterStorage != null">
      `after_storage` = #{record.afterStorage,jdbcType=INTEGER}, 
      </if>
      <if test="record.operateUserId != null">
      `operate_user_id` = #{record.operateUserId,jdbcType=INTEGER}, 
      </if>
      <if test="record.remark != null">
      `remark` = #{record.remark,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="record.createTime != null">
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `tally_storage_log`
    <set>
      `user_id` = #{record.userId,jdbcType=INTEGER}, 
      `relate_id` = #{record.relateId,jdbcType=INTEGER}, 
      `operate_type` = #{record.operateType,jdbcType=INTEGER}, 
      `operate_type_name` = #{record.operateTypeName,jdbcType=LONGVARCHAR}, 
      `product_name` = #{record.productName,jdbcType=LONGVARCHAR}, 
      `product_no` = #{record.productNo,jdbcType=LONGVARCHAR}, 
      `product_id` = #{record.productId,jdbcType=INTEGER}, 
      `spec_id` = #{record.specId,jdbcType=INTEGER}, 
      `storage` = #{record.storage,jdbcType=INTEGER}, 
      `before_storage` = #{record.beforeStorage,jdbcType=INTEGER}, 
      `after_storage` = #{record.afterStorage,jdbcType=INTEGER}, 
      `operate_user_id` = #{record.operateUserId,jdbcType=INTEGER}, 
      `remark` = #{record.remark,jdbcType=LONGVARCHAR}, 
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLog">
    update `tally_storage_log`
    <set>
      <if test="userId != null">
      `user_id` = #{userId,jdbcType=INTEGER}, 
      </if>
      <if test="relateId != null">
      `relate_id` = #{relateId,jdbcType=INTEGER}, 
      </if>
      <if test="operateType != null">
      `operate_type` = #{operateType,jdbcType=INTEGER}, 
      </if>
      <if test="operateTypeName != null">
      `operate_type_name` = #{operateTypeName,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="productName != null">
      `product_name` = #{productName,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="productNo != null">
      `product_no` = #{productNo,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="productId != null">
      `product_id` = #{productId,jdbcType=INTEGER}, 
      </if>
      <if test="specId != null">
      `spec_id` = #{specId,jdbcType=INTEGER}, 
      </if>
      <if test="storage != null">
      `storage` = #{storage,jdbcType=INTEGER}, 
      </if>
      <if test="beforeStorage != null">
      `before_storage` = #{beforeStorage,jdbcType=INTEGER}, 
      </if>
      <if test="afterStorage != null">
      `after_storage` = #{afterStorage,jdbcType=INTEGER}, 
      </if>
      <if test="operateUserId != null">
      `operate_user_id` = #{operateUserId,jdbcType=INTEGER}, 
      </if>
      <if test="remark != null">
      `remark` = #{remark,jdbcType=LONGVARCHAR}, 
      </if>
      <if test="createTime != null">
      `create_time` = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tally.dao.tallystoragelog.model.TallyStorageLog">
    update `tally_storage_log`
    <set>
      `user_id` = #{userId,jdbcType=INTEGER}, 
      `relate_id` = #{relateId,jdbcType=INTEGER}, 
      `operate_type` = #{operateType,jdbcType=INTEGER}, 
      `operate_type_name` = #{operateTypeName,jdbcType=LONGVARCHAR}, 
      `product_name` = #{productName,jdbcType=LONGVARCHAR}, 
      `product_no` = #{productNo,jdbcType=LONGVARCHAR}, 
      `product_id` = #{productId,jdbcType=INTEGER}, 
      `spec_id` = #{specId,jdbcType=INTEGER}, 
      `storage` = #{storage,jdbcType=INTEGER}, 
      `before_storage` = #{beforeStorage,jdbcType=INTEGER}, 
      `after_storage` = #{afterStorage,jdbcType=INTEGER}, 
      `operate_user_id` = #{operateUserId,jdbcType=INTEGER}, 
      `remark` = #{remark,jdbcType=LONGVARCHAR}, 
      `create_time` = #{createTime,jdbcType=TIMESTAMP}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
</mapper>