<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.tally.dao.tallybilldetail.TallyBillDetailMapper">

  <resultMap id="BaseResultMap" type="com.tally.dao.tallybilldetail.model.TallyBillDetail">
    <id column="id" jdbcType="INTEGER" property="id"/>
    <result column="bill_id" jdbcType="INTEGER" property="billId"/>
    <result column="in_out_type_id" jdbcType="INTEGER" property="inOutTypeId"/>
    <result column="in_out_type" jdbcType="INTEGER" property="inOutType"/>
    <result column="in_out_type_name" jdbcType="VARCHAR" property="inOutTypeName"/>
    <result column="per_price" jdbcType="DECIMAL" property="perPrice"/>
    <result column="number" jdbcType="INTEGER" property="number"/>
    <result column="settle_number" jdbcType="INTEGER" property="settleNumber"/>
    <result column="amount" jdbcType="DECIMAL" property="amount"/>
    <result column="settle_amount" jdbcType="DECIMAL" property="settleAmount"/>
    <result column="product_id" jdbcType="INTEGER" property="productId"/>
    <result column="product_spec_id" jdbcType="INTEGER" property="productSpecId"/>
    <result column="product_spec_name" jdbcType="VARCHAR" property="productSpecName"/>
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime"/>
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                      #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    `id`, `bill_id`, `in_out_type_id`, `in_out_type`, `in_out_type_name`, `per_price`, `number`,`settle_number`, `amount`, `settle_amount`, `product_id`, `product_spec_id`, `product_spec_name`, `create_time`
  </sql>
  <select id="selectByExample" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetailExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List"/>
    from `tally_bill_detail`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    <include refid="Base_Column_List"/>
    from `tally_bill_detail`
    where `id` = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from `tally_bill_detail`
    where `id` = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetailExample">
    delete from `tally_bill_detail`
    <if test="_parameter != null">
      <include refid="Example_Where_Clause"/>
    </if>
  </delete>
  <insert id="insert" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetail">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_bill_detail` (
      `bill_id`, 
      `in_out_type_id`, 
      `in_out_type`, 
      `in_out_type_name`, 
      `per_price`, 
      `number`, 
      `settle_number`,
      `amount`,
      `settle_amount`, 
      `product_id`, 
      `product_spec_id`, 
      `product_spec_name`, 
      `create_time`
    )
    values (
      #{billId,jdbcType=INTEGER}, 
      #{inOutTypeId,jdbcType=INTEGER}, 
      #{inOutType,jdbcType=INTEGER}, 
      #{inOutTypeName,jdbcType=VARCHAR}, 
      #{perPrice,jdbcType=DECIMAL}, 
      #{number,jdbcType=INTEGER}, 
      #{settleNumber,jdbcType=INTEGER},
      #{amount,jdbcType=DECIMAL},
      #{settleAmount,jdbcType=DECIMAL}, 
      #{productId,jdbcType=INTEGER}, 
      #{productSpecId,jdbcType=INTEGER}, 
      #{productSpecName,jdbcType=VARCHAR}, 
      #{createTime,jdbcType=TIMESTAMP}
    )
  </insert>
  <insert id="insertSelective" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetail">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into `tally_bill_detail`
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="billId != null">
      `bill_id`,
      </if>
      <if test="inOutTypeId != null">
      `in_out_type_id`,
      </if>
      <if test="inOutType != null">
      `in_out_type`,
      </if>
      <if test="inOutTypeName != null">
      `in_out_type_name`,
      </if>
      <if test="perPrice != null">
      `per_price`,
      </if>
      <if test="number != null">
      `number`,
      </if>
      <if test="settleNumber != null">
      `settle_number`,
      </if>
      <if test="amount != null">
      `amount`,
      </if>
      <if test="settleAmount != null">
      `settle_amount`,
      </if>
      <if test="productId != null">
      `product_id`,
      </if>
      <if test="productSpecId != null">
      `product_spec_id`,
      </if>
      <if test="productSpecName != null">
      `product_spec_name`,
      </if>
      <if test="createTime != null">
      `create_time`,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="billId != null">
      #{billId,jdbcType=INTEGER},
      </if>
      <if test="inOutTypeId != null">
      #{inOutTypeId,jdbcType=INTEGER},
      </if>
      <if test="inOutType != null">
      #{inOutType,jdbcType=INTEGER},
      </if>
      <if test="inOutTypeName != null">
      #{inOutTypeName,jdbcType=VARCHAR},
      </if>
      <if test="perPrice != null">
      #{perPrice,jdbcType=DECIMAL},
      </if>
      <if test="number != null">
      #{number,jdbcType=INTEGER},
      </if>
      <if test="settleNumber != null">
      #{settleNumber,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
      #{amount,jdbcType=DECIMAL},
      </if>
      <if test="settleAmount != null">
      #{settleAmount,jdbcType=DECIMAL},
      </if>
      <if test="productId != null">
      #{productId,jdbcType=INTEGER},
      </if>
      <if test="productSpecId != null">
      #{productSpecId,jdbcType=INTEGER},
      </if>
      <if test="productSpecName != null">
      #{productSpecName,jdbcType=VARCHAR},
      </if>
      <if test="createTime != null">
      #{createTime,jdbcType=TIMESTAMP},
      </if>
    </trim>
  </insert>
  <insert id="insertBatch">
        insert into
        tally_bill_detail
        (
        bill_id,
        in_out_type_id,
        in_out_type,
        in_out_type_name,
        per_price,
        number,
        settle_number,
        amount,
        settle_amount,
        product_id,
        product_spec_id,
        product_spec_name
        )
        values
        <foreach collection="list" item="item" index="index" separator=",">
          (
          #{item.billId,jdbcType=INTEGER},
          #{item.inOutTypeId,jdbcType=INTEGER},
          #{item.inOutType,jdbcType=INTEGER},
          #{item.inOutTypeName,jdbcType=VARCHAR},
          #{item.perPrice,jdbcType=DECIMAL},
          #{item.number,jdbcType=INTEGER},
          #{item.settleNumber,jdbcType=INTEGER},
          #{item.amount,jdbcType=DECIMAL},
          #{item.settleAmount,jdbcType=DECIMAL},
          #{item.productId,jdbcType=INTEGER},
          #{item.productSpecId,jdbcType=INTEGER},
          #{item.productSpecName,jdbcType=VARCHAR}
          )
    </foreach>
  </insert>
  <select id="countByExample" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetailExample" resultType="java.lang.Integer">
    select count(*) from `tally_bill_detail`
    <if test="_parameter != null">
    <include refid="Example_Where_Clause"/>
    </if>
  </select>
  <select id="findByBillId" resultMap="BaseResultMap">
      select  *  from  tally_bill_detail where bill_id = #{id}
  </select>
    <select id="findCollectLList" resultMap="BaseResultMap">
           SELECT
              tba.product_id,
              tba.product_spec_id,
              tba.product_spec_name,
              sum(tba.number - tba.settle_number) AS number
          FROM
              tally_bill_detail tba
          WHERE
              tba.bill_id IN
              <foreach collection="billIds" item="id" open="(" separator="," close=")">
                   #{id}
              </foreach>
          GROUP BY
              tba.product_spec_id
    </select>
    <select id="getToSettleDeatials" resultMap="BaseResultMap">
      select tba.* from tally_bill_detail tba
      LEFT JOIN tally_bill tb on tb.id=tba.bill_id
      where  tb.is_material = 1 and tba.product_spec_id = #{productSpecId}  and  tba.number > tba.settle_number and tba.in_out_type!=0
</select>
    <update id="updateByExampleSelective" parameterType="map">
    update `tally_bill_detail`
    <set>
      <if test="record.billId != null">
      `bill_id` = #{record.billId,jdbcType=INTEGER}, 
      </if>
      <if test="record.inOutTypeId != null">
      `in_out_type_id` = #{record.inOutTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="record.inOutType != null">
      `in_out_type` = #{record.inOutType,jdbcType=INTEGER}, 
      </if>
      <if test="record.inOutTypeName != null">
      `in_out_type_name` = #{record.inOutTypeName,jdbcType=VARCHAR}, 
      </if>
      <if test="record.perPrice != null">
      `per_price` = #{record.perPrice,jdbcType=DECIMAL}, 
      </if>
      <if test="record.number != null">
      `number` = #{record.number,jdbcType=INTEGER}, 
      </if>
      <if test="record.settleNumber != null">
      `settle_number` = #{record.settleNumber,jdbcType=INTEGER},
      </if>
      <if test="record.amount != null">
      `amount` = #{record.amount,jdbcType=DECIMAL}, 
      </if>
      <if test="record.settleAmount != null">
      `settle_amount` = #{record.settleAmount,jdbcType=DECIMAL}, 
      </if>
      <if test="record.productId != null">
      `product_id` = #{record.productId,jdbcType=INTEGER}, 
      </if>
      <if test="record.productSpecId != null">
      `product_spec_id` = #{record.productSpecId,jdbcType=INTEGER}, 
      </if>
      <if test="record.productSpecName != null">
      `product_spec_name` = #{record.productSpecName,jdbcType=VARCHAR}, 
      </if>
      <if test="record.createTime != null">
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update `tally_bill_detail`
    <set>
      `bill_id` = #{record.billId,jdbcType=INTEGER}, 
      `in_out_type_id` = #{record.inOutTypeId,jdbcType=INTEGER}, 
      `in_out_type` = #{record.inOutType,jdbcType=INTEGER}, 
      `in_out_type_name` = #{record.inOutTypeName,jdbcType=VARCHAR}, 
      `per_price` = #{record.perPrice,jdbcType=DECIMAL}, 
      `number` = #{record.number,jdbcType=INTEGER}, 
      `settle_number` = #{record.settleNumber,jdbcType=INTEGER},
      `amount` = #{record.amount,jdbcType=DECIMAL},
      `settle_amount` = #{record.settleAmount,jdbcType=DECIMAL}, 
      `product_id` = #{record.productId,jdbcType=INTEGER}, 
      `product_spec_id` = #{record.productSpecId,jdbcType=INTEGER}, 
      `product_spec_name` = #{record.productSpecName,jdbcType=VARCHAR}, 
      `create_time` = #{record.createTime,jdbcType=TIMESTAMP}
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause"/>
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetail">
    update `tally_bill_detail`
    <set>
      <if test="billId != null">
      `bill_id` = #{billId,jdbcType=INTEGER}, 
      </if>
      <if test="inOutTypeId != null">
      `in_out_type_id` = #{inOutTypeId,jdbcType=INTEGER}, 
      </if>
      <if test="inOutType != null">
      `in_out_type` = #{inOutType,jdbcType=INTEGER}, 
      </if>
      <if test="inOutTypeName != null">
      `in_out_type_name` = #{inOutTypeName,jdbcType=VARCHAR}, 
      </if>
      <if test="perPrice != null">
      `per_price` = #{perPrice,jdbcType=DECIMAL}, 
      </if>
      <if test="number != null">
      `number` = #{number,jdbcType=INTEGER}, 
      </if>
      <if test="settleNumber != null">
      `settle_number` = #{settleNumber,jdbcType=INTEGER},
      </if>
      <if test="amount != null">
      `amount` = #{amount,jdbcType=DECIMAL}, 
      </if>
      <if test="settleAmount != null">
      `settle_amount` = #{settleAmount,jdbcType=DECIMAL}, 
      </if>
      <if test="productId != null">
      `product_id` = #{productId,jdbcType=INTEGER}, 
      </if>
      <if test="productSpecId != null">
      `product_spec_id` = #{productSpecId,jdbcType=INTEGER}, 
      </if>
      <if test="productSpecName != null">
      `product_spec_name` = #{productSpecName,jdbcType=VARCHAR}, 
      </if>
      <if test="createTime != null">
      `create_time` = #{createTime,jdbcType=TIMESTAMP}
      </if>
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.tally.dao.tallybilldetail.model.TallyBillDetail">
    update `tally_bill_detail`
    <set>
      `bill_id` = #{billId,jdbcType=INTEGER}, 
      `in_out_type_id` = #{inOutTypeId,jdbcType=INTEGER}, 
      `in_out_type` = #{inOutType,jdbcType=INTEGER}, 
      `in_out_type_name` = #{inOutTypeName,jdbcType=VARCHAR}, 
      `per_price` = #{perPrice,jdbcType=DECIMAL}, 
      `number` = #{number,jdbcType=INTEGER}, 
      `settle_number` = #{settleNumber,jdbcType=INTEGER},
      `amount` = #{amount,jdbcType=DECIMAL},
      `settle_amount` = #{settleAmount,jdbcType=DECIMAL}, 
      `product_id` = #{productId,jdbcType=INTEGER}, 
      `product_spec_id` = #{productSpecId,jdbcType=INTEGER}, 
      `product_spec_name` = #{productSpecName,jdbcType=VARCHAR}, 
      `create_time` = #{createTime,jdbcType=TIMESTAMP}
    </set>
    where `id` = #{id,jdbcType=INTEGER}
  </update>
    <update id="updateSettledByBillId">
      update tally_bill_detail set settle_amount = amount where bill_id = #{billId}
    </update>
</mapper>